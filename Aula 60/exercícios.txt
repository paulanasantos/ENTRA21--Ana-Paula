1-

constformat=require("pg-format");
constdb=require("./db");
 
(async()=>{​​​​​​​​
try{​​​​​​​​
constres=awaitdb.query("SELECT NOW()")
console.log(res.rows)
}​​​​​​​​catch(error){​​​​​​​​
console.log(error.message)
}​​​​​​​​
finally{​​​​​​​​
db.end();
}​​​​​​​​
}​​​​​​​​)();

2 - 

constdb=require("./db");
constformat=require("pg-format");
 
(async()=>{​​​​​​​​
try{​​​​​​​​
awaitdb.query(`
    CREATE TABLE IF NOT EXISTS clientes (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        nome text NOT NULL,
        email text NOT NULL UNIQUE,
        telefone text NOT NULL UNIQUE,
        numero_documento text NOT NULL UNIQUE,
        tipo_pessoa text NOT NULL,
        pontos integer NOT NULL
    );
 
    CREATE TABLE IF NOT EXISTS enderecos (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        rua text NOT NULL,
        numero integer NOT NULL,
        cidade text NOT NULL,
        estado text NOT NULL,
        cep text NOT NULL,
        id_cliente uuid NOT NULL REFERENCES clientes
    );
 
     CREATE TABLE IF NOT EXISTS editoras (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        nome_gerente text NOT NULL,
        telefone text NOT NULL
    );
 
    CREATE TABLE IF NOT EXISTS livros (
        isbn UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        nome_autor text NOT NULL,
        assunto text NOT NULL,
        quantidade_estoque integer NOT NULL,
        preco numeric NOT NULL CHECK (preco > 0),
        id_editora uuid NOT NULL REFERENCES editoras
    );
 
    CREATE TABLE IF NOT EXISTS compras (
        id_cliente uuid NOT NULL REFERENCES clientes,
        id_livro uuid NOT NULL REFERENCES livros,
        data date NOT NULL,
        valor numeric NOT NULL
    );`);

console.log("Tabelas criadas com sucesso!");
}​​​​​​​​catch(error){​​​​​​​​
console.log(error.message);
}​​​​​​​​finally{​​​​​​​​
db.end();
}​​​​​​​​
}​​​​​​​​)();

3 - 

constdb=require("./db");
constformat=require("pg-format");



 
letcliente={​​​​​​​​nome:"Anna Júlia",email:"ana@email.com",telefone:"(47) 9 3333-2222",numero_documento:"123.456.789-10",tipo_pessoa:"PF",rua:"Ruazinha",numero:123,cidade:"Indaial",estado:"SC",cep:"1234"}​​​​​​​​;
 
asyncfunction insereCliente(cliente){​​​​​​​​
try{​​​​​​​​
letdados_cliente=[[cliente.nome,cliente.email,cliente.telefone,cliente.numero_documento,cliente.tipo_pessoa]];
querc= format("INSERT INTO clientes (nome,email,telefone,numero_documento,tipo_pessoa) VALUES %L RETURNING id",dados_cliente);
insere=awaitdb.query(querc);
letdados_endereco=[[cliente.rua,322,cliente.cidade,cliente.estado,cliente.cep,insere.rows[0].id]];
console.log(dados_endereco);
quere= format("INSERT INTO enderecos (rua,numero,cidade,estado,cep,id_cliente) VALUES %L RETURNING *",dados_endereco);
insere2=awaitdb.query(quere);
}​​​​​​​​catch(error){​​​​​​​​
console.log(error.message)
}​​​​​​​​
finally{​​​​​​​​
db.end();
}​​​​​​​​
}​​​​​​​​
 
asyncfunction mostraCliente(){​​​​​​​​
try{​​​​​​​​
const{​​​​​​​​rows}​​​​​​​​=awaitdb.query('SELECT * FROM enderecos')
console.log(rows)
}​​​​​​​​
catch(error){​​​​​​​​
console.log(error.message)
}​​​​​​​​
finally{​​​​​​​​
db.end();
}​​​​​​​​
}​​​​​​​​
 
asyncfunction deletarTodos(){​​​​​​​​
try{​​​​​​​​
awaitdb.query('DELETE FROM clientes')
}​​​​​​​​
catch(error){​​​​​​​​
console.log(error.message)
}​​​​​​​​
finally{​​​​​​​​
db.end();
}​​​​​​​​
}​​​​​​​​
 
insereCliente(cliente)

